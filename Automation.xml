<project name="AutomationTesting" basedir="." default="RunAutomation">

    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>
   
    <condition property="Product.SoSSE" else="false">
        <or>
          <contains string="${ProductName}" substring="SoSSE"/>
          <contains string="${ProductName}" substring="SoSS"/>
        </or>
    </condition>
	
    <condition property="Product.SoO" else="false">
          <contains string="${ProductName}" substring="SoO"/>
    </condition>
	
	<condition property="Product.TIC" else="false">
	  <or>
          <contains string="${ProductName}" substring="TIC"/>
		  <contains string="${ProductName}" substring="BISuite"/>
	      <contains string="${ProductName}" substring="TDECP"/>
	  </or>
    </condition>
    
	<condition property="Product.DataPoint" else="false">
		<contains string="${ProductName}" substring="DataPoint"/>
    </condition>
	  
	<if>
		<equals arg1="${Product.TIC}" arg2="true"/>
		<then>
	      <property name="ProductFamily" value="TIC"/>
		</then>
    </if>

	<if>
		<equals arg1="${Product.DataPoint}" arg2="true"/>
		<then>
	      <property name="ProductFamily" value="DataPoint"/>
		</then>
    </if>	

	
	 <property file="./${SiteCode}/Build_${ProductFamily}.Properties"/>
	 <property environment="JenkinsEnv"/>
	
	<condition property="Automation.TestExecutable.set" else="false">
		<isset property="Automation.TestExecutable"/>
	</condition>
	<if>
		<equals arg1="${Automation.TestExecutable.set}" arg2="false"/>
		<then>
			<property name="Automation.TestExecutable" value="TestExecute"/>
		</then>
	</if>
	
	<!-- Check whether AutomationVM property exists-->
	<condition property="AutomationVM.property.exists" else="false">
        <isset property="AutomationVM"/>
    </condition>
	
	<if>
	  <equals arg1="${AutomationVM.property.exists}" arg2="true"/>
	  <then>
	    <!-- Get First and Second VM when started two VMs-->
	    <script language="javascript"> <![CDATA[			  
	         var AutomationVMTmp = project.getProperty("AutomationVM");				
	         var VMs = AutomationVMTmp.split("&");	
             if(VMs.length>1)
             {			 
	             project.setProperty("FirstVM",VMs[0]);				
	             project.setProperty("SecondVM",VMs[1]);	
             }else if(VMs.length==1){
			     project.setProperty("FirstVM",VMs[0]);
			 }
			 var remotePath = project.getProperty("AutomationVM.Local.dir").replace(":", "$");
			 project.setProperty("ProjectPath", remotePath);
			 var remoteHtmlLogPath = project.getProperty("AutomationVM.ConvertedLog.dir").replace(":", "$");
			 project.setProperty("HtmlLogPath", remoteHtmlLogPath);
	    ]]> </script>
	    <property name="AutomationVM.Automation.dir" value="\\${FirstVM}\C$\Automation"/>
		<property name="AutomationVM.Project.dir" value="\\${FirstVM}\${ProjectPath}"/>
		<property name="AutomationVM.HtmlLog.dir" value="\\${FirstVM}\${HtmlLogPath}"/>
	  </then>
	</if>
	
    
   <!--RunAutomation is main target,it call other target to run-->
	<target name="RunAutomation"> 
		 <echo message="OSName: ${JenkinsEnv.COMPUTERNAME}"/>
		 <echo message="Job WorkSpace: ${JobWorkSpace.dir}"/>
		 <!--TestOutput-->
		 <echo message="Branch=${BRANCH}"/>
		 <echo message="Installer=${FILE_INSTALLER}"/>
		 <echo message="AutomationVM=${AutomationVM}"/>
		 <echo message="TestTool=${Automation.TestExecutable}"/>
		 <echo message="LocalProjectPath=${AutomationVM.Automation.dir}"/>
		 <echo message="RemoteProjectPath=${AutomationVM.Project.dir}"/>
		 
		 <antcall target="InitJenkinsServerJobWorkSpace"/>
		 <antcallback target="GetInstallerFileName" return="InstallerFileName"/>
		 <antcall target="SetBuildDisplayName"> <param name="InstallerFileName" value="${InstallerFileName}"/> </antcall>
		 <if>
			<not>
				<equals arg1="${StartVMToPrebuild}" arg2="false"/>
			</not>
			 <then>
				<antcall target="StartVMToPrebuild"/>
			 </then>
		 </if>
		 <antcall target="CopyAutomationFilesToVM"> <param name="InstallerFileName" value="${InstallerFileName}"/> </antcall>
		 <antcall target="RunTestCasesOnVM"/>
		 <antcall target="ProcessTestCasesResults"/>
		 <if>
			 <not>
				<equals arg1="${PowerOffVM}" arg2="false"/>
			 </not>
			 <then>
				<antcall target="PowerOffVM"/>
			 </then>
			 <else>
			 	<antcall target="DeleteAutomationFilesOnVM"/>
			 </else>
		 </if>
		 
	
	</target>
	
	
	<target name="InitJenkinsServerJobWorkSpace">
	     <tstamp>
			<format property="TimeLogging" pattern="MM-dd-yyyy_HH-mm-ss" locale="en"/>
		 </tstamp>
		 
	      <tstamp>
            <format property="CopyrightYear" pattern="yyyy" locale="en"/>
         </tstamp>
         
         <tstamp>
            <format property="BuildStartTime" pattern="MM/dd/yyyy HH:mm:ss" locale="en"/>
        </tstamp>
        <condition property="JobWorkSpace.dir.exists" else="false">
            <available file="${Automation.TestResults.dir}" type="dir"/>
        </condition>
       <echo message="${Automation.TestResults.dir}"/>
	   <echo message="${Automation.TestLogs.dir}"/>
	   <echo message="JobWorkSpace.dir.exists:${JobWorkSpace.dir.exists}"/>
         <if>
		   <equals arg1="${JobWorkSpace.dir.exists}" arg2="false"/>
		   <then>
		      <echo message="Creating Automation.TestResults.dir and Automation.TestLogs.dir"/>
			  <mkdir dir="${Automation.TestResults.dir}"/>
		   </then>
		   <else>
		      <echo message="Deleting Automation.TestResults.dir:${Automation.TestResults.dir}"/>
			  <delete includeemptydirs="true">
                   <fileset dir="${Automation.TestResults.dir}" includes="**/*"/>
              </delete>
		   </else>
		 </if>
	
	</target>
	
	
	<target name="GetLatestBuild">
		<java jar="${JenkinsServer.AntUtilities.dir}/JenkinsFileUtils.jar" fork="true" failonerror="false" maxmemory="128m" outputproperty="JenkinsServerLatestBuild">
			<arg value="-jar"/>
			<arg value="GetLatestBuild"/> 
			<arg value="${JenkinsServer.ProductInstaller.dir}"/>
			<arg value="${ProductName}"/>
			<arg value="${BUILD_BRANCH}"/>
			<classpath>
				<pathelement location="${JenkinsServer.AntUtilities.dir}/JenkinsFileUtils.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
		</java>
		<property name ="LatestBuildWithVersion" value="${JenkinsServerLatestBuild}"/>

		 <echo message="Latest Build Version is : ${LatestBuildWithVersion}"/>
		 
	</target>

	
	
	<target name="GetInstallerFileName">
		<condition property="FILE_INSTALLER.Empty" else="false">
			<or>
			<not>
				<isset property="FILE_INSTALLER"/>
			</not>	
			<equals arg1="${FILE_INSTALLER}" arg2=""/>
			</or>
        </condition>
		<if>
			<equals arg1="${FILE_INSTALLER.Empty}" arg2="true"/>
			<then>
				<echo message="Call GetLatestBuild targert to get Installler file name"/>
				<antcallback target="GetLatestBuild" return="LatestBuildWithVersion"/>
				<property name="InstallerFileName" value="${LatestBuildWithVersion}"/>
			</then>
			<else>
				<property name="InstallerFileName" value="${FILE_INSTALLER}"/>
			</else>
		</if>
		
		<echo message="The Installer file name is : ${InstallerFileName}"/>
		
	</target>
	
	
	
	<target name="CopyInstallerToJenkinsServer">
		<antcallback target="GetInstallerFileName" return="InstallerFileName"/>
	    <java jar="${JenkinsServer.AntUtilities.dir}/JenkinsFileUtils.jar" fork="true" failonerror="false" maxmemory="128m" resultproperty="CopyInstallerToJenkinsServerResult" outputproperty="CopyInstallerToJenkinsServerOutput">
		    <arg value="-jar"/>
		    <arg value="CopyInstallerToJenkinsServer"/> 
		    <arg value="${FileServer.NightlyBuild.dir}"/>
			<arg value="${JenkinsServer.ProductInstaller.dir}"/>
			<arg value="${InstallerFileName}"/>
		    <classpath>
				<pathelement location="${JenkinsServer.AntUtilities.dir}/JenkinsFileUtils.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
	    </java>
	  
	  	<echo message="CopyInstallerToJenkinsServer: ${CopyInstallerToJenkinsServerResult}"/>
		<echo message="CopyInstallerToJenkinsServer: ${CopyInstallerToJenkinsServerOutput}"/>

	   <if>
	       <not>
		      <equals arg1="${CopyInstallerToJenkinsServerResult}" arg2="0"/>
			</not>
			<then>
				<fail message="Cannot copy latest build version from ${FileServer.NightlyBuild.dir} to ${JenkinsServer.ProductInstaller.dir}. Jenkins job will stop!"/>
			</then>
		</if> 
	</target>
	
	
	<target name="SetBuildDisplayName">
		<!-- Call target GetInstallerFileName to get Installer file name, only the parent job of Matrix job do this -->
		<if>
			<or>
				<equals arg1="${InstallerFileName}" arg2="$${InstallerFileName}"/>
				<equals arg1="InstallerFileName" arg2=""/>
			</or>
			<then>
				<echo message="Call target GetInstallerFileName to get Installer name"/>
				<antcallback target="GetInstallerFileName" return="InstallerFileName" />
			</then>
		</if>
		
		<!-- Replace product full name with product prefix and remove suffix if the InstallerFileName is installer full name -->
		<condition property="InstallerFileName.IsFullName" else="false">
			  <contains string="${InstallerFileName}" substring=".exe"/>
		</condition>
		<if>
			<equals arg1="${InstallerFileName.IsFullName}" arg2="true"/>
			<then>
				<property name ="InstallerFileFullName" value="${InstallerFileName}"/>
				<propertyregex property="InstallerFileNameWithSuffix" input="${InstallerFileFullName}" regexp="ToadBISuiteInstaller" replace="BISuite" global="true"/>
				<propertyregex property="DisplayInstallerFileName" input="${InstallerFileNameWithSuffix}" regexp=".exe" replace="" global="true"/>
			</then>
			<else>
				<property name="DisplayInstallerFileName" value="${InstallerFileName}"/>
			</else>
		</if>
		
	   <echo message="Display Build version : ${DisplayInstallerFileName}"/>
	   <echo message="${JenkinsEnv.JENKINS_URL}"/>
	   <echo message="${JenkinsEnv.JOB_NAME}"/>
		
	   <java jar="${JenkinsServer.AntUtilities.dir}/jenkins-cli.jar" fork="true" failonerror="true" maxmemory="128m">
		    <arg value="-s"/> 
		    <arg line="${JenkinsEnv.JENKINS_URL}"/>
		    <arg value="set-build-display-name"/>
			<arg value="${JenkinsEnv.JOB_NAME}"/>
			<arg value="${JenkinsEnv.BUILD_NUMBER}"/>
		    <arg value="#${JenkinsEnv.BUILD_NUMBER} ${DisplayInstallerFileName}"/>
			<!--arg line="username"/>
			<arg line="${JenkinsServer.Username}"/>
			<arg line="password"/>
			<arg line="${JenkinsServer.Password}"/-->
		    <classpath>
				<pathelement location="${JenkinsServer.AntUtilities.dir}/jenkins-cli.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
	   </java>
	   <echo message="Set build display name : ${DisplayInstallerFileName}"/>
	</target>
	
	<target name="StartVMToPrebuild">
	   <echo message="Calling ExecuteEsxCommand to start VM on ESX using powershell scripts ."/>
	   
	    <!-- set condition for checking properties whether set on jenkins configuration -->
	    <condition property="SecondVM.property.exists" else="false">
            <isset property="SecondVM"/>
        </condition>
        
		 <!-- check whether need start second VM for upgrade remote test -->
		 <if>
           <equals arg1="${SecondVM.property.exists}" arg2="true"/>
            <then>
			   <echo message="Start Second VM for upgrade remote tests."/>
			   <antcallback target="ExecuteEsxCommand" return="EsxCommandReturnCode">
	                <param name="argCommand" value="start"/>
		            <param name="AutomationExecuteVM" value="${SecondVM}"/>
	           </antcallback>
			   <if>
	             <not>
                   <equals arg1="${EsxCommandReturnCode}" arg2="0"/>
		         </not>
	             <then>
		             <fail message="Jenkins job stoped because automation VM can not start."/>
		         </then>
	           </if>
			</then>
	    </if>

	   <echo message="Start Automation VM."/>
	   <antcallback target="ExecuteEsxCommand" return="EsxCommandReturnCode">
	      <param name="argCommand" value="start"/>
		  <param name="AutomationExecuteVM" value="${FirstVM}"/>
	   </antcallback>

	   <if>
	     <not>
           <equals arg1="${EsxCommandReturnCode}" arg2="0"/>
		 </not>
	     <then>
		   <fail message="Jenkins job stoped because automation VM can not start.Please manually check the status of following vm:${AutomationVM} ${SecondVM}"/>
		 </then>
	   </if>
	   <echo message="execute ipconfig /flushdns on jenkins server."/>
        <exec executable="cmd">
           <arg value="/c" />
           <arg value="ipconfig" />
           <arg value="/flushdns" />
        </exec>
	</target>



	<target name="CopyAutomationFilesToVM">
		<echo message="Wait 120 seconds for creating folder: ${AutomationVM.Automation.dir}"/>
	    <sleep seconds="120"/>
		<java jar="${JenkinsServer.AntUtilities.dir}/JenkinsFileUtils.jar" fork="true" failonerror="false" maxmemory="128m" resultproperty="CopyAutomationFilesToVMResult" outputproperty="CopyAutomationFilesToVMOutput">
		    <arg value="-jar"/>
		    <arg value="CopyAutomationFilesToVM"/> 
			<arg value="${JenkinsServer.TCScripts.dir}"/>
			<arg value="${JenkinsServer.ProductInstaller.dir}"/>
			<arg value="${AutomationVM.Automation.dir}"/>
			<arg value="${InstallerFileName}"/>
			<arg value="${BRANCH}"/>
		    <classpath>
				<pathelement location="${JenkinsServer.AntUtilities.dir}/JenkinsFileUtils.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
	    </java>
		
		<echo message="CopyAutomationFilesToVMResult: ${CopyAutomationFilesToVMResult}"/>
		<echo message="CopyAutomationFilesToVMOutput: ${CopyAutomationFilesToVMOutput}"/>
		<if>
		    <not>
		        <equals arg1="${CopyAutomationFilesToVMResult}" arg2="0"/>
		    </not>
		    <then>
				<antcall target="PowerOffVM"/>
				<fail message="Cannot copy latest build version from ${FileServer.NightlyBuild.dir} to ${JenkinsServer.TCScripts.dir} and ${JenkinsServer.ProductInstaller.dir}. Jenkins job will stop!"/>
		    </then>
		</if> 
	</target>
	
	
	<target name="RunTestCasesOnVM">
	        <echo message="-----------------Error code information--------------------------"/>
			<echo message="if wscript returns 0,it means testcase run successful!"/>
			<echo message="if wscript returns 1,it means testcase has a warning!"/>
			<echo message="if wscript returns 2,it means testcase run failed!"/>
			<echo message="if wscript returns 1000,it means Testcomplete was already running and testcomplete can not open the project."/>
			<echo message="-----------------------------------------------------------------"/>
			<!-- set condition for checking properties whether set on jenkins configuration -->
	        <condition property="SecondVM.property.exists" else="false">
              <isset property="SecondVM"/>
            </condition>
        
		 <!-- check whether need start second VM for upgrade remote test -->
		    <if>
              <equals arg1="${SecondVM.property.exists}" arg2="true"/>
              <then>
			      <property name="TestParameterSet" value="&quot;${TestParameters},SecondVM=${SecondVM},SITE_CODE=${SiteCode}&quot;"/>
			  </then>
			   <else>
			      <property name="TestParameterSet" value="&quot;${TestParameters},SITE_CODE=${SiteCode}&quot;"/>
			   </else>
			</if>
	        <echo message="-----------------Basic information------------------------------"/>
            <echo>AutomationVM:                           ${FirstVM}</echo>
            <echo>AutomationVM.Automation.dir :           ${AutomationVM.Automation.dir}</echo>
            <echo>Automation TestUser:                    ${Automation.TestUser}</echo>
            <echo>Automation TestPassword:                ${Automation.TestPassword}</echo>
            <echo>Automation TestExecutable:              ${Automation.TestExecutable}</echo>
            <echo>Automation ProjectSuit:                 ${Automation.pjs}</echo>
			<echo>Automation TestParameters:              ${TestParameterSet}</echo>
			<echo message="------------------------------------------------------------------"/>
			<echo message="${AutomationVM.Local.dir}\RunGroup.vbs ${Automation.TestExecutable} ${AutomationVM.Local.dir}\${Automation.pjs} ${TestCompleteProjectName} ${RunGroupName} ${TestParameterSet}" />
            <echo message="Sit back and relax, TestCase is running" />
			

			<!-- List all process of ${FirstVM} and check if process TestExecute exist -->
			<echo message="Execute pslist"/>
			<exec executable="pslist" failonerror="false" timeout="120000" outputproperty="PsexecOutput1" errorproperty="PsexecErrorMsg1" resultproperty="PsexecResultCode1">
				<arg value="\\${FirstVM}"/>
				<arg line="-u ${Automation.TestUser} -p ${Automation.TestPassword}"/> 
				<arg line="-e TestExecute"/> 
			</exec>
			<echo message="===================PslistOutput==============="/>
		    <echo message="${PsexecOutput1}"/>
		    <echo message="${PsexecErrorMsg1}"/>
			<echo message="PsexecResultCode: ${PsexecResultCode1}"/>
            <echo message="===================PslistOutput end==========="/>
			
			<!-- If process TestExecute exist, kill it -->
			<if>
				<equals arg1="${PsexecResultCode1}" arg2="0"/>
				<then>
					<echo message="Execute pskill"/>
					<exec executable="pskill" failonerror="false" timeout="120000" outputproperty="PsexecOutput2" errorproperty="PsexecErrorMsg2" resultproperty="PsexecResultCode2">
						<arg value="\\${FirstVM}"/>
						<arg line="-u ${Automation.TestUser} -p ${Automation.TestPassword}"/> 
						<arg line="TestExecute"/> 
					</exec>
					<echo message="===================PskillOutput==============="/>
					<echo message="${PsexecOutput2}"/>
					<echo message="${PsexecErrorMsg2}"/>
					<echo message="PsexecResultCode: ${PsexecResultCode2}"/>
					<echo message="===================PskillOutput end============"/>
					<if>
					   <not>
						 <equals arg1="${PsexecResultCode2}" arg2="0"/>
					   </not>
					   <then>
						  <echo message="Kill TestExecute process failed."/>
					   </then>						
					</if>
				</then>
			</if>
			
			
			<echo message="Execute psexec"/>
			<exec executable="psexec" failonerror="false" timeout="18000000" outputproperty="PsexecOutput" errorproperty="PsexecErrorMsg" resultproperty="PsexecResultCode">
                   <arg value="\\${FirstVM}"/>
                   <arg value="-n"/>
                   <arg value="60"/>
                   <arg line="-u ${Automation.TestUser} -p ${Automation.TestPassword}"/> 
	               <arg line="-i -h wscript"/>
                   <arg line="${AutomationVM.Local.dir}\RunGroup.vbs ${Automation.TestExecutable} ${AutomationVM.Local.dir}\${Automation.pjs} ${TestCompleteProjectName} ${RunGroupName} ${TestParameterSet}"/>
            </exec>
            <echo message="===================PsexecOutput=========================="/>
		    <echo message="${PsexecOutput}"/>
		    <echo message="${PsexecErrorMsg}"/>
			<echo message="PsexecResultCode: ${PsexecResultCode}"/>
            <echo message="===================PsexecOutput end======================="/>
			<if>
			   <not>
			     <equals arg1="${PsexecResultCode}" arg2="0"/>
			   </not>
			   <then>
			      <echo message="Calling TakeFailedSnapshotOnVM."/>
				  <antcall target= "TakeFailedSnapshotOnVM"/>
		       </then>
		    </if>
	</target>
	
	<!--Keep in mind that this ant is being executed on Jenkins server, not in test VM, so we need a network path to copy log files-->
	<target name="ProcessTestCasesResults">
	    <trycatch property="errormessage">
	    	<try>		
			    <path id="TestComplete.RawLogInXml.Folder"> 
		            <fileset dir="${AutomationVM.Project.dir}/RawResultsInXml" includes="**/Log/**/{*}"/> 
		        </path> 
		        
		        <path id="TestComplete.ConvertedLogInHtml.Folder"> 
		            <fileset dir="${AutomationVM.Project.dir}/Log" includes="**/*"/> 
		        </path> 
		        
		        <property name="TestComplete.RawResultsInXml"  refid="TestComplete.RawLogInXml.Folder"/> 
		        
		        <property name="TestComplete.ConvertedResultsInHtml"  refid="TestComplete.ConvertedLogInHtml.Folder"/> 	

		    </try>
	    	<catch>
	    		<echo message="${errormessage}"/>
	    	</catch>
	    </trycatch>
		<!--     
	    <echo message="TestComplete RawResultsInXml:${TestComplete.RawResultsInXml}"/>	     
	    <echo message="TestComplete ConvertedResultsInHtml:${TestComplete.ConvertedResultsInHtml}"/>
		-->	     
	     <condition property="TestComplete.Results.existed" else="false">
			<and>
			     <not><equals arg1="" arg2="${TestComplete.RawResultsInXml}"/></not>
			     <not><equals arg1="" arg2="${TestComplete.ConvertedResultsInHtml}"/></not> 
			 </and>
		 </condition> 
         <echo message="TestComplete finished running. Results is generated:${TestComplete.Results.existed}"/>
         <if>
           <equals arg1="${TestComplete.Results.existed}" arg2="true"/>
           <then>
		   
		   <trycatch property="errormessage">
            <try>
              <!-- Copy the raw TC logs to jenkins test results folder:${Automation.TestResults.dir} -->
			  <echo message="Copy TC raw log from ${AutomationVM.Project.dir} to ${Automation.TestResults.dir}"/>
              <copy todir="${Automation.TestResults.dir}" flatten="true" overwrite="true">
                 <fileset dir="${AutomationVM.Project.dir}">
                     <include name="**/Log/**/{*}"/>
                </fileset>
              </copy>
             
                <!-- Copy the TestComplete converted log for jenkins html publisher folder. -->
           	    <!-- The TestComplte result in html format is used by Jenkins to render the job report web pages. -->
				<echo message="Copy converted html log from ${AutomationVM.HtmlLog.dir} to ${Automation.TestResults.dir}\html"/>
                 <mkdir dir="${Automation.TestResults.dir}/html"/>
                 <copy todir="${Automation.TestResults.dir}/html">
                      <fileset dir="${AutomationVM.HtmlLog.dir}"/>
                 </copy>
				
				<!-- Copy support bundle only for SoO. -->	
							
					<if>
						<equals arg1="${Product.SoO}" arg2="true"/>
						<then>
							<echo message="Copying support bundle from ${AutomationVM.Project.dir}\RawResultsInXml\Support to ${Automation.TestResults.dir}\Support_Bundle" />
							<mkdir dir="${Automation.TestResults.dir}/Support_Bundle"/>
							<copy todir="${Automation.TestResults.dir}/Support_Bundle">
								<fileset dir="${AutomationVM.Project.dir}/RawResultsInXml/Support"/>
							</copy>
						</then>
					</if>
					<if>
						<equals arg1="${Product.TIC}" arg2="true"/>
						<then>
							<echo message="Copying support bundle from ${AutomationVM.Project.dir}\RawResultsInXml\Support to ${Automation.TestResults.dir}\Support_Bundle" />
							<mkdir dir="${Automation.TestResults.dir}/Support_Bundle"/>
							<copy todir="${Automation.TestResults.dir}/Support_Bundle">
								<fileset dir="${AutomationVM.Project.dir}/RawResultsInXml/Support"/>
							</copy>
						</then>
					</if>   
				 </try>
				<catch>
				   <echo message="${errormessage}"/>
				</catch>
				<finally>
				<!-- Use Dephi programe to convert TestComplete Raw Log from Xml into JUnit format. The JUnit format results is used by Jenkind to determine the job status. -->
					 <exec executable="${JenkinsServer.AntUtilities.dir}/TestCompleteResultsTransform.exe" failonerror="true" timeout="10800000">
						  <arg value="${Automation.TestResults.dir}"/>
					 </exec>
				</finally>
			 </trycatch>  
           </then>
          </if> 
	</target>

	<!--Remove c:\Automation from test VM-->
	<target name="DeleteAutomationFilesOnVM">
		<condition property="AutomationFiles.property.exists" else="false">
			<and>
				<available file="${AutomationVM.Automation.dir}" type="dir"/>
			</and>
		</condition>
		
		<if>
			<equals arg1="${AutomationFiles.property.exists}" arg2="true"/>
			<then>
				<echo message="${AutomationVM.Automation.dir} exist!"/>
				<delete includeEmptyDirs="true">
					<fileset dir="${AutomationVM.Automation.dir}" excludes="NightlyBuild/"/>
				</delete>
				<echo message="Delete automation files ${AutomationVM.Automation.dir} on VM"/>
			</then>
		</if>
	</target>

	
	<target name="PowerOffVM">
		  <!-- set condition for checking properties whether set on jenkins configuration -->
	      <condition property="SecondVM.property.exists" else="false">
              <isset property="SecondVM"/>
          </condition>
        
		 <!-- check whether need shut down second VM for upgrade remote test -->
		 <if>
            <equals arg1="${SecondVM.property.exists}" arg2="true"/>
            <then>
			    <echo message="Shut down Second VM:${SecondVM}"/>
				<antcall target="PowerOffAllAutomationVMOnEsx">
				  <param name="FirstVM" value="${SecondVM}"/>
				</antcall>
			</then>
	     </if>
		 <echo message="Shut down the Automation VM:${FirstVM}"/>
		       
		 <antcall target="PowerOffAllAutomationVMOnEsx"/>
		 
         <echo message="VM is Shutdowning,please wait 90 seconds until VM powered off..."/> 
         <sleep seconds="90"/>		 
	</target>
			
	<target name="TakeFailedSnapshotOnVM">
	    <echo message="Calling ExecuteEsxCommand."/>
	    <antcall target="ExecuteEsxCommand">
	        <param name="argCommand" value="snapshotfailure"/>
			<param name="AutomationExecuteVM" value="${AutomationVM}"/>
	    </antcall>
	</target>
	
	<target name="ExecuteEsxCommand">
	     <echo message="================================================"/>
         <echo message="argCommand    ${argCommand}" />
         <echo message="AutomationVM  ${AutomationExecuteVM}"/>
         <echo message="ESX_NAME      ${ESX_NAME}"/>
         <echo message="ESX_USERNAME  ${ESX_USERNAME}"/>
         <echo message="ESX_PASSWORD  ${ESX_PASSWORD}"/>	
         <echo message="================================================"/>
         <exec dir="${JenkinsServer.AntScripts.dir}" executable="powershell" failonerror="false" errorproperty="ErrorMessage" resultproperty="PowerShellErrorCode">
		     <arg value="-File"/>
		     <arg value="ESXUtilities.ps1"/>
		     <arg value="${argCommand}"/>
		     <arg value="${AutomationExecuteVM}"/>
		     <arg value="${ESX_NAME}"/>
		     <arg value="${ESX_USERNAME}"/>
		     <arg value="${ESX_PASSWORD}"/>   
		 </exec>
		 
		 <echo message="${ErrorMessage}"/>
		 <property name="EsxCommandReturnCode" value="${PowerShellErrorCode}"/>
	</target>
	
	<target name="CleanProductInstaller">
	   <echo message="Cleaning old product version:${JenkinsServer.ProductInstaller.dir}."/>
	   <delete includeemptydirs="true">
           <fileset dir="${JenkinsServer.ProductInstaller.dir}" includes="**/*"/>
       </delete>
	</target>
	
	<target name="PowerOffAllAutomationVMOnEsx">
		<antcallback target="ExecuteEsxCommand" return="EsxCommandReturnCode">
			<param name="argCommand" value="GetVMPoweredStatus"/>
			<param name="AutomationExecuteVM" value="${FirstVM}"/>
		</antcallback>
		
		<if>
			<not>
			<equals arg1="${EsxCommandReturnCode}" arg2="0"/>
			</not>
			<then>
				<exec executable="psshutdown" failonerror="true" outputproperty="PsexecOutput" errorproperty="PsexecErrorMsg" resultproperty="PsexecResultCode">
					<arg value="\\${FirstVM}"/>
					<arg line="-u ${Automation.TestUser} -p ${Automation.TestPassword}"/> 
					<arg line="-f -t 1"/> 
				</exec>
			<if>
				<not>
					<equals arg1="${PsexecResultCode}" arg2="0"/>
				</not>
				<then>
					<fail message="Failed to power off ${FirstVM}"/>
				</then>
			</if>
			</then>
		</if>
		
	</target>
	
	<target name="DeletePrebuild">
	   <antcallback target="ExecuteEsxCommand" return="EsxCommandReturnCode">
	      <param name="argCommand" value="deleteprebuild"/>
		  <param name="AutomationExecuteVM" value="${FirstVM}"/>
	   </antcallback>
	</target>
	
	<target name="CreatePrebuild">
	   <antcallback target="ExecuteEsxCommand" return="EsxCommandReturnCode">
	      <param name="argCommand" value="createprebuild"/>
		  <param name="AutomationExecuteVM" value="${FirstVM}"/>
	   </antcallback>
	</target>
	
	<target name="ExecuteWindowsUpdate">
	   <antcall target="StartVMToPrebuild"/>
	   <echo message="wait 8 hours for windows updating......."/>
	   <sleep seconds="28800"/>
	   <echo message="Windows Updates finished,need power off to create new snapshot"/>
	   <antcall target="PowerOffAllAutomationVMOnEsx"/>
	   <echo message="Deleting older prebuild snapshot..."/>
	   <antcall target="DeletePrebuild"/>
	    <echo message="Creating new prebuild snapshot...."/>
	   <antcall target="CreatePrebuild"/>
	</target>
</project>