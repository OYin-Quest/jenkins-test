<project name="common">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>

	<condition property="Product.TIC" else="false">
		<or>
			<contains string="${ProductName}" substring="TIC"/>
			<contains string="${ProductName}" substring="BISuite"/>
		</or>
	</condition>
	
	<condition property="Product.TDECP" else="false">
		<contains string="${ProductName}" substring="TDECP"/>
	</condition>

	<condition property="Product.DataPoint" else="false">
		<contains string="${ProductName}" substring="DataPoint"/>
	</condition>

	<if>
		<equals arg1="${Product.TIC}" arg2="true"/>
		<then>
			<property name="ProductFamily" value="TIC"/>
		</then>
		<elseif>
			<equals arg1="${Product.DataPoint}" arg2="true"/>
			<then>
				<property name="ProductFamily" value="DataPoint"/>
			</then>
		</elseif>
		<elseif>
			<equals arg1="${Product.TDECP}" arg2="true"/>
			<then>
				<property name="ProductFamily" value="TDECP"/>
			</then>
		</elseif>
	</if>

	<property environment="JenkinsEnv"/>
	<!-- .Properties file need to use above JenkinsEnv property-->
	<property file="./${SiteCode}/Skytap_Build_${ProductFamily}.Properties"/>

	<property name="Automation.TestExecutable" value="TestExecute"/>
	<property name="AutomationVM" value="${JenkinsEnv.COMPUTERNAME}"/>

	<target name="InitJenkinsServerJobWorkSpace">
		<tstamp>
			<format property="TimeLogging" pattern="MM-dd-yyyy_HH-mm-ss" locale="en"/>
		</tstamp>

		<tstamp>
			<format property="CopyrightYear" pattern="yyyy" locale="en"/>
		</tstamp>

		<tstamp>
			<format property="BuildStartTime" pattern="MM/dd/yyyy HH:mm:ss" locale="en"/>
		</tstamp>
	</target>

	<target name="GetLatestBuild">
		<java jar="${Automation.AntUtilities.dir}/JenkinsFileUtils.jar" fork="true" failonerror="false" maxmemory="128m" outputproperty="JenkinsServerLatestBuild">
			<arg value="-jar"/>
			<arg value="GetLatestBuild"/> 
			<arg value="installerDir=${Automation.ProductInstaller.dir}"/>
			<arg value="productName=${ProductName}"/>
			<arg value="devBranch=${INSTALLER_BRANCH}"/>
			<classpath>
				<pathelement location="${Automation.AntUtilities.dir}/JenkinsFileUtils.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
		</java>
		<property name ="LatestBuildWithVersion" value="${JenkinsServerLatestBuild}"/>
		<echo message="Latest Build Version is : ${LatestBuildWithVersion}"/>
		
		<if>
			<equals arg1="${LatestBuildWithVersion}" arg2="Non Exist"/>
			<then>
				<fail message="Failed to get latest build for ${ProductName} from ${Automation.ProductInstaller.dir}!"/>
			</then>
		</if> 
	</target>

	<target name="GetInstallerFileName">
		<if>
			<not>
				<isset property="InstallerFileName"/>
			</not>
			<then>
				<condition property="INSTALLER_NAME.Empty" else="false">
					<or>
						<not>
							<isset property="INSTALLER_NAME"/>
						</not>	
						<equals arg1="${INSTALLER_NAME}" arg2=""/>
					</or>
				</condition>
				<if>
					<equals arg1="${INSTALLER_NAME.Empty}" arg2="true"/>
					<then>
						<echo message="Call GetLatestBuild targert to get Installler file name"/>
						<antcallback target="GetLatestBuild" return="LatestBuildWithVersion"/>
						<property name="InstallerFileName" value="${LatestBuildWithVersion}"/>
					</then>
					<else>
						<property name="InstallerFileName" value="${INSTALLER_NAME}"/>
					</else>
				</if>
			</then>
		</if>
		<echo message="The Installer file name is : ${InstallerFileName}"/>
	</target>

	<target name="CopyInstaller">
		<antcallback target="GetInstallerFileName" return="InstallerFileName"/>
		<java jar="${Automation.AntUtilities.dir}/JenkinsFileUtils.jar" fork="true" failonerror="false" maxmemory="128m" resultproperty="CopyInstallerToJenkinsServerResult" outputproperty="CopyInstallerToJenkinsServerOutput">
			<arg value="-jar"/>
			<arg value="CopyInstaller"/> 
			<arg value="installerDir=${FileServer.NightlyBuild.dir}"/>
			<arg value="installerToDir=${Automation.ProductInstaller.dir}"/>
			<arg value="installerName=${InstallerFileName}"/>
			<classpath>
				<pathelement location="${Automation.AntUtilities.dir}/JenkinsFileUtils.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
		</java>

		<echo message="CopyInstallerToJenkinsServerResult: ${CopyInstallerToJenkinsServerResult}"/>
		<echo message="CopyInstallerToJenkinsServerOutput: ${CopyInstallerToJenkinsServerOutput}"/>

		<if>
			<not>
				<equals arg1="${CopyInstallerToJenkinsServerResult}" arg2="0"/>
			</not>
			<then>
				<fail message="Cannot copy latest build version from ${FileServer.NightlyBuild.dir} to ${Automation.ProductInstaller.dir}. Jenkins job will stop!"/>
			</then>
		</if> 
	</target>

	<target name="SetBuildDisplayName">
		<!-- Call target GetInstallerFileName to get Installer file name, only the parent job of Matrix job do this -->
		<if>
			<or>
				<equals arg1="${InstallerFileName}" arg2="$${InstallerFileName}"/>
				<equals arg1="InstallerFileName" arg2=""/>
			</or>
			<then>
				<echo message="Call target GetInstallerFileName to get Installer name"/>
				<antcallback target="GetInstallerFileName" return="InstallerFileName" />
			</then>
		</if>

		<!-- Replace product full name with product prefix and remove suffix if the InstallerFileName is installer full name -->
		<var name="BuildDisplayName" value="${InstallerFileName}"/>
		<propertyregex property="InstallerFileNameWithSuffix" input="${BuildDisplayName}" regexp="ToadBISuiteInstaller" replace="BISuite" global="true" defaultvalue="${BuildDisplayName}"/>
		<!-- Since a property value cannot be set value twice, so we have to save its value and unset it-->
		<var name="BuildDisplayName" value="${InstallerFileNameWithSuffix}"/>
		<var name="InstallerFileNameWithSuffix" unset="true"/>

		<propertyregex property="InstallerFileNameWithSuffix" input="${BuildDisplayName}" regexp="ToadDecisionPointPro" replace="TDECP" global="true" defaultvalue="${BuildDisplayName}"/>
		<var name="BuildDisplayName" value="${InstallerFileNameWithSuffix}"/>
		<var name="InstallerFileNameWithSuffix" unset="true"/>

		<!-- ToadIntelligenceCentralAdminConsole contains sub string ToadIntelligenceCentral, so we replace ToadIntelligenceAdminConsole at first -->
		<propertyregex property="InstallerFileNameWithSuffix" input="${BuildDisplayName}" regexp="ToadIntelligenceCentralAdminConsole" replace="TICAC" global="true" defaultvalue="${BuildDisplayName}"/>
		<var name="BuildDisplayName" value="${InstallerFileNameWithSuffix}"/>
		<var name="InstallerFileNameWithSuffix" unset="true"/>

		<propertyregex property="InstallerFileNameWithSuffix" input="${BuildDisplayName}" regexp="ToadIntelligenceCentral" replace="TIC" global="true" defaultvalue="${BuildDisplayName}"/>
		<var name="BuildDisplayName" value="${InstallerFileNameWithSuffix}"/>
		<var name="InstallerFileNameWithSuffix" unset="true"/>

		<propertyregex property="DisplayInstallerFileName" input="${BuildDisplayName}" regexp=".exe" replace="" global="true" defaultvalue="${BuildDisplayName}"/>
		<var name="BuildDisplayName" value="${DisplayInstallerFileName}"/>
		<var name="DisplayInstallerFileName" unset="true"/>

		<propertyregex property="DisplayInstallerFileName" input="${BuildDisplayName}" regexp=".msi" replace="" global="true" defaultvalue="${BuildDisplayName}"/>

		<echo message="Display Build version : ${DisplayInstallerFileName}"/>
		<echo message="Jenkins Job Url: ${JenkinsEnv.JENKINS_URL}"/>
		<echo message="Jenkins Job Name: ${JenkinsEnv.JOB_NAME}"/>

		<java jar="${Automation.AntUtilities.dir}/jenkins-cli.jar" fork="true" failonerror="true" maxmemory="128m">
			<arg value="-s"/> 
			<arg line="${JenkinsEnv.JENKINS_URL}"/>
			<arg value="set-build-display-name"/>
			<arg value="${JenkinsEnv.JOB_NAME}"/>
			<arg value="${JenkinsEnv.BUILD_NUMBER}"/>
			<arg value="#${JenkinsEnv.BUILD_NUMBER} ${DisplayInstallerFileName}"/>
			<!--arg line="username"/>
			<arg line="${JenkinsServer.Username}"/>
			<arg line="password"/>
			<arg line="${JenkinsServer.Password}"/-->
			<classpath>
				<pathelement location="${Automation.AntUtilities.dir}/jenkins-cli.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
		</java>
		<echo message="Set build display name : ${DisplayInstallerFileName}"/>
	</target>
	
	<target name="CopyAutomationFilesToVM">
		<java jar="${Automation.AntUtilities.dir}/JenkinsFileUtils.jar" fork="true" failonerror="false" maxmemory="128m" resultproperty="CopyAutomationFilesToVMResult" outputproperty="CopyAutomationFilesToVMOutput">
			<arg value="-jar"/>
			<arg value="CopyAutomationFilesToVM"/> 
			<arg value="testScriptDir=${Automation.TCScripts.dir}"/>
			<arg value="installerDir=${Automation.ProductInstaller.dir}"/>
			<arg value="automationDir=${Automation.Project.dir}"/>
			<arg value="installerName=${InstallerFileName}"/>
			<arg value="testBranch=${TEST_BRANCH}"/>
			<classpath>
				<pathelement location="${Automation.AntUtilities.dir}/JenkinsFileUtils.jar"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
		</java>

		<echo message="CopyAutomationFilesToVMResult: ${CopyAutomationFilesToVMResult}"/>
		<echo message="CopyAutomationFilesToVMOutput: ${CopyAutomationFilesToVMOutput}"/>
		<if>
			<not>
				<equals arg1="${CopyAutomationFilesToVMResult}" arg2="0"/>
			</not>
			<then>
				<fail message="Cannot copy latest build version from ${FileServer.NightlyBuild.dir} to ${JenkinsServer.TCScripts.dir} and ${JenkinsServer.ProductInstaller.dir}. Jenkins job will stop!"/>
			</then>
		</if> 
	</target>

	<target name="RunTestCasesOnVM">
		<echo message="-----------------Error code information--------------------------"/>
		<echo message="if wscript returns 0,it means testcase run successful!"/>
		<echo message="if wscript returns 1,it means testcase has a warning!"/>
		<echo message="if wscript returns 2,it means testcase run failed!"/>
		<echo message="if wscript returns 1000,it means Testcomplete was already running and testcomplete can not open the project."/>
		<echo message="-----------------------------------------------------------------"/>

		<!-- TestParameters contains HostName, duplicate to AutomationVM, is it necessary?-->
		<property name="TestParameterSet" value="&quot;${TestParameters},SITE_CODE=${SiteCode}&quot;"/>
		
		<echo message="-----------------Basic information------------------------------"/>
		<echo>AutomationVM:							${FirstVM}</echo>
		<echo>Automation.Local.dir:					${Automation.Local.dir}</echo>
		<echo>Automation TestUser:					${Automation.TestUser}</echo>
		<echo>Automation TestPassword:				${Automation.TestPassword}</echo>
		<echo>Automation TestExecutable:			${Automation.TestExecutable}</echo>
		<echo>Automation ProjectSuit:				${Automation.pjs}</echo>
		<echo>Automation TestParameters:			${TestParameterSet}</echo>
		<echo message="------------------------------------------------------------------"/>
		<echo message="${Automation.Local.dir}\RunGroup.vbs ${Automation.TestExecutable} ${Automation.Local.dir}\${Automation.pjs} ${TestCompleteProjectName} ${RunGroupName} ${TestParameterSet}"/>
		<echo message="Execute psexec to run automation tests..."/>
		<exec executable="psexec" failonerror="false" timeout="18000000" outputproperty="PsexecOutput" errorproperty="PsexecErrorMsg" resultproperty="PsexecResultCode">
			<arg value="\\${FirstVM}"/>
			<arg value="-n"/>
			<arg value="60"/>
			<arg line="-u ${Automation.TestUser} -p ${Automation.TestPassword}"/> 
			<arg line="-i -h wscript"/>
			<arg line="${Automation.Local.dir}\RunGroup.vbs ${Automation.TestExecutable} ${Automation.Local.dir}\${Automation.pjs} ${TestCompleteProjectName} ${RunGroupName} ${TestParameterSet}"/>
		</exec>
		<echo message="===================PsexecOutput=========================="/>
		<echo message="${PsexecOutput}"/>
		<echo message="${PsexecErrorMsg}"/>
		<echo message="PsexecResultCode: ${PsexecResultCode}"/>
		<echo message="===================PsexecOutput end======================="/>
		<if>
			<not>
				<equals arg1="${PsexecResultCode}" arg2="0"/>
			</not>
			<then>
				<echo message="Calling TakeFailedSnapshotOnVM."/>
			</then>
		</if>
	</target>

	<!--In Skytap, this script is running on dynamic slave VM-->
	<target name="ProcessTestCasesResults">
		<trycatch property="errormessage">
			<try>
				<!-- Copy the raw automation logs to a folder under job workspace. -->
				<echo message="Copy automation raw log from ${Automation.Local.dir} to ${Automation.TestResults.dir}"/>
				<copy todir="${Automation.TestResults.dir}" flatten="true" overwrite="true">
					<fileset dir="${Automation.Local.dir}">
						<include name="**/Log/**/{*}"/>
					</fileset>
				</copy>

				<!-- Copy the TestComplete converted log to a folder under job workspace. -->
				<!-- The TestComplte result in html format is used by Jenkins to render the job report web pages. -->
				<echo message="Copy converted html log from ${Automation.ConvertedLog.dir} to ${Automation.TestResults.dir}\html"/>
				<copy todir="${Automation.TestResults.dir}/html">
					<fileset dir="${Automation.ConvertedLog.dir}"/>
				</copy>

				<!-- Copy support bundle to a folder under job workspace. We can only archive files that are located in job workspace. -->	
				<if>
					<equals arg1="${Product.TIC}" arg2="true"/>
					<then>
						<echo message="Copying support bundle from ${Automation.Local.dir}\RawResultsInXml\Support to ${Automation.TestResults.dir}\Support_Bundle" />
						<copy todir="${Automation.TestResults.dir}/Support_Bundle">
							<fileset dir="${Automation.Local.dir}/RawResultsInXml/Support"/>
						</copy>
					</then>
				</if>   
			</try>
			<catch>
				<echo message="${errormessage}"/>
			</catch>
			<finally>
				<!-- Use Dephi programe to convert TestComplete Raw Log from Xml into JUnit format. The JUnit format results is used by Jenkind to determine the job status. -->
				<exec executable="${JenkinsServer.AntUtilities.dir}/TestCompleteResultsTransform.exe" failonerror="true" timeout="10800000">
					<arg value="${Automation.TestResults.dir}"/>
				</exec>
			</finally>
		</trycatch>
	</target>

	<!--Remove C:\Automation from test VM-->
	<target name="DeleteAutomationFilesOnVM">
		<trycatch property="delErrMsg">
			<try>
				<echo message="Delete automation files ${Automation.Local.dir} on VM"/>
				<delete includeEmptyDirs="true">
					<fileset dir="${Automation.Local.dir}" excludes="NightlyBuild/"/>
				</delete>
			</try>
			<catch>
				<echo message="${delErrMsg}"/>
			</catch>
		</trycatch>
	</target>
</project>